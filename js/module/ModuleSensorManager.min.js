class ClassSensorManager{constructor(){if(this.Instance)return this.Instance;ClassSensorManager.prototype.Instance=this,this._Devices=[],Object.on("sensor-start-polling",_arg=>{let freq=_arg[0];this._Interval||this.StartPolling(freq)}),Object.on("sensor-stop-polling",()=>{this.StopPolling()}),Object.on("sensor-get-info",()=>{this.GetSensorsInfo()}),Object.on("sensor-write",_arg=>{this.ExecuteCom(_arg)}),Object.on("new-device",device=>{this.AddDevice(device)})}get Devices(){return this._Devices}get Sensors(){return this._Devices.filter(device=>"sensor"===device._Type.toLowerCase())}AddDevice(device){!this.GetDevice(device.ID)&&device.ID&&this._Devices.push(device)}GetDevice(id){return this._Devices.find(dev=>dev.ID===id)}GetDeviceChannel(chId){let id=chId.split("-"),chNum=+id.pop(),device=this.GetDevice(id.join("-"));return device?device.GetChannel(chNum):null}StartPolling(_freq){const freq=_freq||4;if("number"!=typeof freq||freq<=0)return!1;const valIsEqual=(a,b)=>{const precision=.05;return a===b||Math.abs(a-b)<=.05*a};let data_cache={};return this._Interval=setInterval(()=>{let data_package={};this.Sensors.map(sensor=>{sensor._Channels.forEach(ch=>{valIsEqual(ch.Value,data_cache[ch.ID])||(data_package[ch.ID]=ch.Value,data_cache[ch.ID]=ch.Value)})}),Object.keys(data_package).length&&this.SendData(data_package)},1/freq*1e3),!0}StopPolling(){this._Interval&&clearInterval(this._Interval),this._Interval=null}GetSensorsInfo(){let data_package={MetaData:"Info",Value:[]};this.Devices.forEach(device=>{let sensor_info={},propsList;("sensor"===device._Type?["_Name","_Type","_QuantityChannel","_ChannelNames","_MinRange","_MaxRange","_TypeInSignal","_TypeOutSignal","_BusTypes","_ManufacturingData","_IsChUsed","_IsAvailable"]:"actuator"===device._Type?["_Name","_Type","_QuantityChannel","_ChannelNames","_MinRange","_MaxRange","_TypeInSignals","_BusTypes","_ManufacturingData","_IsChOn","_Offsets"]:[]).forEach(prop=>{sensor_info[prop]=device[prop]}),data_package.Value.push(sensor_info)}),this.SendData(data_package)}SendData(dataPackage){Object.emit("sensor-data",dataPackage)}SendInfo(infoArray){Object.emit("sensor-info",infoArray)}ExecuteCom(arg){let id=arg.shift(),methodName=arg.shift(),device=this.GetDeviceChannel(id);return!!device&&("function"==typeof device[methodName]&&(device[methodName].apply(device,arg),!0))}IsIDUnique(_id){return Boolean(this.Devices.find(device=>device.ID===_id))}ArePinsAvailable(_pins){for(let i=0;i<_pins.length;i++)if(this.Devices.find(device=>device._Pins.includes(_pins[i])))return!1;return!0}}exports=ClassSensorManager;